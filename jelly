#!/usr/bin/env python3

import jelly

flag_utf8 = False
end = ''

usage = '''Usage:

    jelly f <file> [input]    Reads the Jelly program stored in the
                              specified file, using the Jelly code page.
                              This option should be considered the default,
                              but it exists solely for scoring purposes in
                              code golf contests.

    jelly fu <file> [input]   Reads the Jelly program stored in the
                              specified file, using the UTF-8 encoding.

    jelly e <code> [input]    Reads a Jelly program as a command line
                              argument, using the Jelly code page. This
                              requires setting the environment variable
                              LANG (or your OS's equivalent) to en_US or
                              compatible.

    jelly eu <code> [input]   Reads a Jelly program as a command line
                              argument, using the UTF-8 encoding. This
                              requires setting the environment variable
                              LANG (or your OS's equivalent) to en_US.UTF8
                              or compatible.

    Append an `n` to the flag list to append a trailing newline to the
    program's output.

Visit http://github.com/DennisMitchell/jelly for more information.\n'''

if len(jelly.sys.argv) < 3:
    raise SystemExit(usage)

for char in jelly.sys.argv[1]:
	if char == 'f':
		flag_file = True
	elif char == 'u':
		flag_utf8 = True
	elif char == 'e':
		flag_file = False
	elif char == 'n':
		end = '\n'

if flag_file:
	with open(jelly.sys.argv[2], 'rb') as file:
		code = file.read()
	if flag_utf8:
		code = ''.join(char for char in code.decode('utf-8').replace('\n', '¶') if char in jelly.code_page)
	else:
		code = ''.join(jelly.code_page[i] for i in code)
else:
	code = jelly.sys.argv[2]
	if flag_utf8:
		code = ''.join(char for char in code.replace('\n', '¶') if char in jelly.code_page)
	else:
		code = ''.join(jelly.code_page[ord(i)] for i in code)

args = list(map(jelly.try_eval, jelly.sys.argv[3:]))

for index in range(min(7, len(args))):
	jelly.atoms['³⁴⁵⁶⁷⁸⁹'[index]].call = lambda literal = args[index]: literal

try:
	jelly.output(jelly.jelly_eval(code, args[:2]), end)
except KeyboardInterrupt:
	if jelly.sys.stderr.isatty():
		jelly.sys.stderr.write('\n')
	raise SystemExit(130)
